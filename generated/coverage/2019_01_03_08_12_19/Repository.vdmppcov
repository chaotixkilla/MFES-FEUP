class Repository

types
-- TODO Define types here
	public String = Utilities`String;
	public RepositoryVisibility = Utilities`RepositoryVisibility;

values
-- TODO Define values here

instance variables
-- TODO Define instance variables here
	private owner: User;
	private name: String;
	private collaborators: set of User := {};
	private branches: set of Branch := {};
	private visibility: RepositoryVisibility := <Public>;

operations
-- TODO Define operations here

	-- Repository constructor
	public Repository: User * String ==> Repository
	Repository(user, repName) == (
		owner := user;
		name := repName;
		branches := branches union {new Branch(self, "master")};
		return self;
	)
	post collaborators = {} and visibility = <Public>;
	
	-- Get repository owner
	public pure getOwner: () ==> User
	getOwner() == (
		return owner;
	);
	
	-- Get repository name
	public pure getName: () ==> String
	getName() == (
		return name;
	);
	
	-- Get repository collaborators
	public pure getCollaborators: () ==> set of User
	getCollaborators() == (
		return collaborators;
	);
	
	-- Get repository branches
	public getBranches: () ==> set of Branch
	getBranches() == (
		return branches;
	);
	
	-- Get repository visibility
	public isPublicRepository: () ==> bool
	isPublicRepository() == (
		return visibility = <Public>;
	);
	
	public toggleVisibility: User ==> ()
	toggleVisibility(user) == (
		if visibility = <Public>
			then visibility := <Private>
		else visibility := <Public>
	)
	pre owner = user;
	
	public addCollaborator: User * User ==> ()
	addCollaborator(user, newCollab) == (
		collaborators := collaborators union {newCollab};
	)
	pre owner = user and {newCollab} inter collaborators = {};

functions
-- TODO Define functiones here

traces
-- TODO Define Combinatorial Test Traces here

end Repository