class GithubTest
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
  g : Github := new Github();
  u : Utilities := new Utilities();
  u1 : User := new User("user1", "mail1", "password1");
  u2 : User := new User("user2", "mail2", "password2");
  u3 : User := new User("user3", "mail3", "password3");
  rep : Repository;
  rep2 : Repository;
  b: Branch;
  c: Commit;
operations
  private assertTrue: bool ==> ()
  assertTrue(cond) == return
  pre cond;
  
	-- Create user test
  private createUserTest: () ==> ()
  createUserTest() ==
  (
  	-- There are no users in the initial state
  	assertTrue({} = g.getUsers());
  	-- We add a couple of users
  	g.addUser(u1);
  	g.addUser(u2);
  	-- They can be reached within Github class
  	assertTrue("user1" in set g.getAllUsernames());
  	assertTrue("user2" in set g.getAllUsernames());
  	assertTrue(u1 = g.getUser("user1"));
  	assertTrue(u2 = g.getUser("user2"));
  	assertTrue({u1, u2} = g.getUsers());
	);
	
	-- Login Test
  private loginTest: () ==> ()
  loginTest() ==
  (
  	-- No logged in user in the initial state
  	assertTrue("undef" = g.getLoggedInUsername());
  	-- Cannot login with wrong password
  	assertTrue(not g.login("user1", "wrong password"));
  	-- Can login with right password
  	assertTrue(g.login("user1", "password1"));
  	-- Confirm user is logged in
  	assertTrue("user1" = g.getLoggedInUsername());
  );
	
	-- Create Repository Test
  private createRepositoryTest: () ==> ()
  createRepositoryTest() ==
  (
  	-- No repositories were created in initial state
  	assertTrue({} = g.getRepositories());
  	-- Create one repository
  	g.createRepository(u1, "repName");
  	-- Confirm said repository is created
  	rep := g.getSpecificOwnedRepository(u1, "repName");
  	assertTrue({rep} = g.getUserAvailableRepositories(u1));
  	assertTrue(rep = g.getSpecificAvailableRepository(u1, "repName"));
  	assertTrue({"repName"}  = g.getAllAvailableRepositoriesName(u1));
  	-- Confirm the creator is the owner of the repository
  	assertTrue(u1 = rep.getOwner());
  	-- Confirm master branch was automatically created
  	assertTrue({"master"} = rep.getBranchesNames());
  	-- Confirm repository is automatically public
  	assertTrue(rep.isPublicRepository());
  );
	
	-- Add Colaborator Test
  private addCollaboratorTest: () ==> ()
  addCollaboratorTest() ==
  (
  	-- Confirm no colaborator was added
  	assertTrue({} = rep.getCollaborators());
  	-- Add a colaborator
  	g.addCollaborator(u1, "repName", u2);
  	-- Confirm colaborator was added
  	assertTrue({u2} = rep.getCollaborators());
  	assertTrue({"repName"}  = g.getAllAvailableRepositoriesName(u2));
  	assertTrue({rep} = g.getUserAvailableRepositories(u2));
  );

	-- Repository Visibility Tests
  private repositoryVisibilityTests: () ==> ()
  repositoryVisibilityTests() ==
  (
  	-- Confirm Repository is public by default
  	assertTrue(rep.isPublicRepository());
  	-- Toggle Visibility
  	rep.toggleVisibility(u1);
  	-- Confirm change to Private
  	assertTrue(not rep.isPublicRepository());
  	-- Toggle Visibility
  	rep.toggleVisibility(u1);
  	-- Confirm change to Public
  	assertTrue(rep.isPublicRepository());
  	-- Make it Private
  	rep.makeRepositoryPrivate(u1);
  	-- Confirm change to Private
  	assertTrue(<Private> = rep.getVisibility());
  	-- Make it Public
  	rep.makeRepositoryPublic(u1);
  	-- Confirm change to Public
  	assertTrue(<Public> = rep.getVisibility());
  );
	
	-- Clonable Repositories Test
  private getClonableRepositoriesTest: () ==> ()
  getClonableRepositoriesTest() ==
  (
  	-- Create new user
  	g.addUser(u3);
  	-- Repository cannot be cloned by others because it is private
  	g.makeRepositoryPrivate(u1, "repName");
  	assertTrue(<Private> = rep.getVisibility());
  	assertTrue({rep} = g.getClonableRepositories(u1));
  	assertTrue({rep} = g.getClonableRepositories(u2));
  	assertTrue({} = g.getClonableRepositories(u3));
  	-- Repository can be cloned because it is public
  	g.makeRepositoryPublic(u1, "repName");
  	assertTrue(<Public> = rep.getVisibility());
  	assertTrue({rep} = g.getClonableRepositories(u1));
  	assertTrue({rep} = g.getClonableRepositories(u2));
  	assertTrue({rep} = g.getClonableRepositories(u3));
  );
	
	-- Create Branch Test
  private createBranchTest: () ==> ()
  createBranchTest() ==
  (
  	-- Create a branch
  	g.createBranch(u2, "repName", "branchName");
  	-- Confirm branch was created
  	assertTrue({"master", "branchName"} = rep.getBranchesNames());
  	assertTrue({rep.getSpecificBranch("master"), rep.getSpecificBranch("branchName")} = rep.getBranches());
  	-- Confirm branch is associated with the right repository
  	b := rep.getSpecificBranch("branchName");
  	assertTrue(rep = b.getRepository());
  	-- Confirm branch has no commits yet
  	assertTrue([] = b.getCommits());
  );
	
	-- Delete Branch Test
  private deleteBranchTest: () ==> ()
  deleteBranchTest() ==
  (
  	-- Create a branch
  	g.createBranch(u2, "repName", "deleteBranchTest");
  	-- Confirm creation
  	assertTrue("deleteBranchTest" in set rep.getBranchesNames());
  	-- Delete a branch
  	g.deleteBranch(u2, "repName", "deleteBranchTest");
  	-- Confirm deletion
  	assertTrue("deleteBranchTest" not in set rep.getBranchesNames());
  );
	
	-- Create Commit Test
  private createCommitTest: () ==> ()
  createCommitTest() ==
  (
		-- Create a commit
  	g.createCommit(u2, "repName", "branchName", "1commitID", "commitMessage1");
  	-- Confirm creation
  	assertTrue(1 = len b.getCommits());
  	-- Confirm commit data
  	c := b.getCommits()(1);
  	assertTrue(u2 = c.getCommitter());
  	assertTrue(b = c.getBranch());
  	assertTrue("commitMessage1" = c.getMessage());
		-- Create another commit
  	g.createCommit(u1, "repName", "branchName", "2commitID", "commitMessage2");
		-- Confirm creation
  	assertTrue(2 = len b.getCommits());
  );
	
	-- Merge Branches Test
  private mergeBranchesTest: () ==> ()
  mergeBranchesTest() ==
  (
  	-- Create a new branch
  	g.createBranch(u1, "repName", "newBranchName");
		-- Create a commit for said branch
  	g.createCommit(u1, "repName", "newBranchName", "3commitID", "commitMessage3");
		-- Merge branches
  	g.mergeBranches(u1, "repName", "branchName", "newBranchName");
		-- Confirm merged branch was deleted
  	assertTrue("newBranchName" not in set rep.getBranchesNames());
		-- Confirm commits were merged
  	assertTrue(3 = len b.getCommits());
  	-- Same test but with a collaborator
  	g.createBranch(u2, "repName", "newBranchName2");
  	g.createCommit(u2, "repName", "newBranchName2", "4commitID", "commitMessage4");
  	g.mergeBranches(u2, "repName", "branchName", "newBranchName2");
  	assertTrue("newBranchName2" not in set rep.getBranchesNames());
  	assertTrue(4 = len b.getCommits());
  );
	
	-- Remove Collaborator Test
  private removeCollaboratorTest: () ==> ()
  removeCollaboratorTest() ==
  (
  	-- Confirm collaborator exists
  	assertTrue({u2} = rep.getCollaborators());
  	-- Remove Collaborator
  	g.removeCollaborator(u1, "repName", u2);
  	-- Confirm removal
  	assertTrue({} = rep.getCollaborators());
  );
	
	-- Logout Test
  private logoutTest: () ==> ()
  logoutTest() ==
  (
  	-- Confirm user is logged in
  	assertTrue("user1" = g.getLoggedInUsername());
  	-- Logout
  	g.logout();
  	-- Confirm user is logged out
  	assertTrue("undef" = g.getLoggedInUsername());
  );
	
	-- Delete User Test
  private deleteUserTest: () ==> ()
  deleteUserTest() ==
  (
  	-- Delete a collaborator
  	-- Confirm user exists
  	assertTrue({u1, u2, u3} = g.getUsers());
  	-- Confirm user is logged in
  	assertTrue(g.login("user2", "password2"));
  	-- Delete user
  	g.deleteUser("user2");
  	-- Confirm user is logged out
  	assertTrue("undef" = g.getLoggedInUsername());
  	-- Confirm user does not exist
  	assertTrue({u1, u3} = g.getUsers());
  	
  	-- Delete an owner of a repository
  	-- Create a repository for u3
  	g.createRepository(u3, "repNameD");
  	-- Confirm creation
  	rep2 := g.getSpecificOwnedRepository(u3, "repNameD");
  	assertTrue({rep, rep2} = g.getClonableRepositories(u1));
  	-- Delete user
  	g.deleteUser("user3");
  	-- Confirm user does not exist
  	assertTrue({u1} = g.getUsers());
  	-- Confirm repository does not exist
  	assertTrue({rep} = g.getClonableRepositories(u1));
  );
  
  -- Delete Repository Test
  private deleteRepositoryTest: () ==> ()
  deleteRepositoryTest() ==
  (
  	-- Confirm repository exists
  	assertTrue({rep} = g.getRepositories());
  	assertTrue({rep} = g.getUserAvailableRepositories(u1));
  	-- Log in with repository owner
  	assertTrue(g.login("user1", "password1"));
  	-- Delete repository
  	g.deleteRepository(u1, "repName");
  	-- Confirm repository was deleted
  	assertTrue({} = g.getRepositories());
  	assertTrue({} = g.getUserAvailableRepositories(u1));
  );
	
  private doTests: () ==> ()
  doTests() ==
  (
  	createUserTest();
  	loginTest();
  	createRepositoryTest();
		addCollaboratorTest();
		repositoryVisibilityTests();
		getClonableRepositoriesTest();
		createBranchTest();
		deleteBranchTest();
		createCommitTest();
		mergeBranchesTest();
		removeCollaboratorTest();
		logoutTest();
		deleteUserTest();
		deleteRepositoryTest();
  );

  public static main: () ==> ()
  main() ==
  (
    new GithubTest().doTests();
  );
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end GithubTest