class Github

types
-- TODO Define types here
	public String = Utilities`String;

values
-- TODO Define values here

instance variables
-- TODO Define instance variables here
	private users: set of User := {};
	private repositories: set of Repository := {};
	private loggedInUsername: String := "undef";

operations
-- TODO Define operations here

	-- GitHub Constructor
	public Github: () ==> Github
	Github() == (
		return self;
	)
	post users = {} and repositories = {};
	
	/****************************************/
	/**************	GET INFO ****************/
	/****************************************/
	
	-- Get all users
	public pure getUsers: () ==> set of User
	getUsers() == (
		return users;
	);
	
	-- Get all repositories
	public pure getRepositories: () ==> set of Repository
	getRepositories() == (
		return repositories;
	);
	
	-- Get currently logged in user username
	public pure getLoggedInUsername: () ==> String
	getLoggedInUsername () == (
		return loggedInUsername;
	);
	
	-- Get specific user, given the username
	public pure getUser: String ==> User
	getUser(username) == (
		for all u in set users do (
			if username = u.getUsername()
				then return u;
		);
		return new User();
	);
	
	-- Get all currently existant usernames
	public pure getAllUsernames: () ==> set of String
	getAllUsernames() == (
		dcl usernames: set of String := {};
		for all u in set users do
			usernames := usernames union {u.getUsername()};
		return usernames;
	);
	
	-- Get all currently existant emails
	public pure getAllEmails: () ==> set of String
	getAllEmails() == (
		dcl emails: set of String := {};
		for all u in set users do
			emails := emails union {u.getEmail()};
		return emails;
	);
	
	-- Get all current repositories owned by a specific user
	public pure getAllOwnedRepositoriesName: User ==> set of String
	getAllOwnedRepositoriesName(user) == (
		dcl userRepos: set of String := {};
		for all r in set repositories do
			if r.getOwner() = user
				then userRepos := userRepos union {r.getName()};
		return userRepos;
	)
	pre {user} inter users = {user}; -- utilizador esta no sistema;
	
	-- Get a specific repository owned by a user
	public pure getSpecificOwnedRepository: User * String ==> Repository
	getSpecificOwnedRepository(user, repName) == (
		dcl rep: Repository;
		for all r in set repositories do
			if r.getOwner() = user and r.getName() = repName
				then rep := r;
		return rep;
	)
	pre {user} inter users = {user} -- utilizador esta no sistema;
		and {repName} inter getAllOwnedRepositoriesName(user) = {repName}; -- o user e o dono do repositorio;
		
	-- Get all current repositories available for a specific user
	public pure getAllAvailableRepositoriesName: User ==> set of String
	getAllAvailableRepositoriesName(user) == (
		dcl userRepos: set of String := {};
		for all r in set repositories do
			if r.getOwner() = user or user in set r.getCollaborators()
				then userRepos := userRepos union {r.getName()};
		return userRepos;
	)
	pre {user} inter users = {user}; -- utilizador esta no sistema;
		
	-- Get all repositories where a user can commit and create branches
	public pure getUserAvailableRepositories: User ==> set of Repository
	getUserAvailableRepositories(user) == (
		dcl repos: set of Repository := {};
		for all r in set repositories do
			if r.getOwner() = user or user in set r.getCollaborators()
				then repos := repos union {r};
		return repos;
	)
	pre {user} inter users = {user}; -- utilizador esta no sistema;
	
	-- Get all clonable repositories by a user
	public pure getClonableRepositories: User ==> set of Repository
	getClonableRepositories(user) == (
		dcl repos: set of Repository := getUserAvailableRepositories(user);
		for all r in set repositories do
			if r.isPublicRepository()
				then repos := repos union {r};
		return repos;
	);
	
	-- Get a specific repository from all available repositories from a user
	public pure getSpecificAvailableRepository: User * String ==> Repository
	getSpecificAvailableRepository(user, repName) == (
		dcl availableRepos: set of Repository := getUserAvailableRepositories(user);
		for all r in set availableRepos do
			if r.getName() = repName
				then return r;
		return new Repository();
	)
	pre {user} inter users = {user} -- utilizador esta no sistema;
		and {repName} inter getAllAvailableRepositoriesName(user) = {repName}; -- o nome introduzido existe na lista de repositorios disponivel
	
	/****************************************/
	/****************	USER ******************/
	/****************************************/
	
	-- Create a new user
	public addUser: User ==> ()
	addUser(user) == (
		users := users union {user}
	)
	pre {user.getUsername()} inter getAllUsernames() = {} -- nome do utilizador nao esta a ser utilizado
		and {user.getEmail()} inter getAllEmails() = {} -- email do utilizador nao esta a ser utilizado
		and {user} inter users = {} -- utilizador nao esta no sistema
	post {user.getUsername()} inter getAllUsernames() = {user.getUsername()}
		and {user.getEmail()} inter getAllEmails() = {user.getEmail()}
		and {user} inter users = {user}; -- utilizador esta no sistema
	
	-- User login
	public login: String * String ==> bool
	login(username, password) == (
		if getUser(username).getPassword() = password
			then (
				loggedInUsername := username;
				return true
			);
		return false;
	)
	pre {username} inter getAllUsernames() <> {} -- o user existe no sistema
		and len username > 0 and len password > 0; -- o input existe
		
	-- User logout
	public logout: () ==> ()
	logout() == (
		loggedInUsername := "undef";
	)
	pre {loggedInUsername} inter getAllUsernames() = {loggedInUsername}
	post loggedInUsername = "undef";
	
	-- Delete user and all owned repositories
	public deleteUser: String ==> ()
	deleteUser(username) == (
		if username = loggedInUsername
			then logout();
			
		for all r in set repositories do
			if r.getOwner() = getUser(username)
				then repositories := repositories \ {r};
				
		users := users \ {getUser(username)};
	)
	pre {getUser(username)} inter users = {getUser(username)}
	post {username} inter getAllUsernames() = {};
		
	/****************************************/
	/************	REPOSITORY ****************/
	/****************************************/
		
	-- Create repository
	public createRepository: User * String ==> ()
	createRepository(user, repName) == (
		dcl newRepo: Repository := new Repository(user, repName);
		repositories := repositories union {newRepo};
	)
	pre {repName} inter getAllOwnedRepositoriesName(user) = {} -- repositorio nao existe
		and user in set users -- user criador existe no sistema
		and len repName > 0 -- input existe
	post {repName} inter getAllOwnedRepositoriesName(user) = {repName}; -- repositorio esta no sistema
	
	-- Delete repository
	public deleteRepository: User * String ==> ()
	deleteRepository(user, repName) == (
		dcl repToDelete: Repository := getSpecificOwnedRepository(user, repName);
		repositories := repositories \ {repToDelete};
	)
	pre	{user} inter users = {user} -- utilizador existe
		and {getSpecificOwnedRepository(user, repName)} inter repositories = {getSpecificOwnedRepository(user, repName)} -- o repositorio existe
		and user = getSpecificOwnedRepository(user, repName).getOwner() -- o utilizador é o owner deste repositorio
	post {repName} inter getAllOwnedRepositoriesName(user) = {}; -- o repositorio nao existe
	
	-- Add collaborator to an owned repository
	public addCollaborator: User * String * User ==> ()
	addCollaborator(owner, repName, newCollab) == (
		dcl repo: Repository := getSpecificOwnedRepository(owner, repName);
		repo.addCollaborator(owner, newCollab);
	)
	pre {owner, newCollab} inter users = {owner, newCollab} -- quer o owner, quer o novo colaborador estao no sistema
		and {repName} inter getAllOwnedRepositoriesName(owner) = {repName} -- o repositorio existe
		and getSpecificOwnedRepository(owner, repName).getCollaborators() inter {newCollab} = {} -- o utilizador a ser introduzido ainda nao e colaborador
	post getSpecificOwnedRepository(owner, repName).getCollaborators() inter {newCollab} = {newCollab};
	
	-- Remove collaborator from an owned repository
	public removeCollaborator: User * String * User ==> ()
	removeCollaborator(owner, repName, oldCollab) == (
		dcl repo: Repository := getSpecificOwnedRepository(owner, repName);
		repo.removeCollaborator(owner, oldCollab);
	)
	pre {owner, oldCollab} inter users = {owner, oldCollab} -- quer o owner, quer o antigo colaborador estao no sistema
		and {repName} inter getAllOwnedRepositoriesName(owner) = {repName} -- o repositorio existe
		and getSpecificOwnedRepository(owner, repName).getCollaborators() inter {oldCollab} = {oldCollab} -- o utilizador a ser removido era colaborador
	post getSpecificOwnedRepository(owner, repName).getCollaborators() inter {oldCollab} = {}; -- o antigo colaborador nao existe
	
	-- Make a repository public
	public makeRepositoryPublic: User * String ==> ()
	makeRepositoryPublic(user, repName) == (
		dcl repo: Repository := getSpecificOwnedRepository(user, repName);
		repo.makeRepositoryPublic(user);
	)
	pre {user} inter users = {user} -- o owner esta no sistema
		and {repName} inter getAllOwnedRepositoriesName(user) = {repName} -- o repositorio existe
	post getSpecificOwnedRepository(user, repName).getVisibility() = <Public>;
	
	-- Make a repository private
	public makeRepositoryPrivate: User * String ==> ()
	makeRepositoryPrivate(user, repName) == (
		dcl repo: Repository := getSpecificOwnedRepository(user, repName);
		repo.makeRepositoryPrivate(user);
	)
	pre {user} inter users = {user} -- o owner esta no sistema
		and {repName} inter getAllOwnedRepositoriesName(user) = {repName} -- o repositorio existe
	post getSpecificOwnedRepository(user, repName).getVisibility() = <Private>;
	
	/****************************************/
	/**********	BRANCH AND COMMIT ***********/
	/****************************************/
	
	-- Create a new branch in a repository
	public createBranch: User * String * String ==> ()
	createBranch(creator, repName, branchName) == (
		dcl rep: Repository := getSpecificAvailableRepository(creator, repName);
		dcl newBranch: Branch := new Branch(rep, branchName);
		rep.addBranch(creator, newBranch);
	)
	pre {creator} inter users = {creator} -- criador do branch existe no sistema
		and {getSpecificAvailableRepository(creator, repName)} inter getUserAvailableRepositories(creator) = {getSpecificAvailableRepository(creator, repName)}; -- o repositorio onde esta a ser criado o branch esta disponivel para o criador
	
	-- Create a new commit to a existant branch
	public createCommit: User * String * String * String * String ==> ()
	createCommit(committer, repName, branchName, commitID, commitMessage) == (
		dcl rep: Repository := getSpecificAvailableRepository(committer, repName);
		dcl branch: Branch := rep.getSpecificBranch(branchName);
		dcl newCommit: Commit := new Commit(committer, branch, commitID, commitMessage);
		branch.addCommit(committer, newCommit);
	)
	pre {committer} inter users = {committer} -- criador do commit existe no sistema
		and {getSpecificAvailableRepository(committer, repName)} inter getUserAvailableRepositories(committer) = {getSpecificAvailableRepository(committer, repName)}; -- o repositorio onde esta a ser criado o commit esta disponivel para o criador
	
	-- Delete an existant branch
	public deleteBranch: User * String * String ==> ()
	deleteBranch(user, repName, branchName) == (
		dcl rep: Repository := getSpecificAvailableRepository(user, repName);
		dcl branch: Branch := rep.getSpecificBranch(branchName);
		rep.deleteBranch(user, branch);
	)
	pre {user} inter users = {user} -- user existe no sistema
		and {getSpecificAvailableRepository(user, repName)} inter getUserAvailableRepositories(user) = {getSpecificAvailableRepository(user, repName)}; -- o repositorio esta disponivel para o user
	
functions
-- TODO Define functiones here

traces
-- TODO Define Combinatorial Test Traces here

end Github