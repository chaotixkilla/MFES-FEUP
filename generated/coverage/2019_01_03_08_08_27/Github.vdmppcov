class Github

types
-- TODO Define types here
	public String = Utilities`String;

values
-- TODO Define values here

instance variables
-- TODO Define instance variables here
	private users: set of User := {};
	private repositories: set of Repository := {};

operations
-- TODO Define operations here

	-- GitHub Constructor
	public Github: () ==> Github
	Github() == (
		return self;
	)
	post users = {} and repositories = {};
	
	-- Get specific user, given the username
	public getUser: String ==> User
	getUser(username) == (
		for all u in set users do (
			if username = u.getUsername()
				then return u;
		);
		return new User();
	);
	
	-- Get all currently existant usernames
	public pure getAllUsernames: () ==> set of String
	getAllUsernames() == (
		dcl usernames: set of String := {};
		for all u in set users do
			usernames := usernames union {u.getUsername()};
		return usernames;
	);
	
	-- Get all currently existant emails
	public pure getAllEmails: () ==> set of String
	getAllEmails() == (
		dcl emails: set of String := {};
		for all u in set users do
			emails := emails union {u.getEmail()};
		return emails;
	);
	
	-- Get all current repositories from a specific user
	public pure getAllUserRepositoriesName: User ==> set of String
	getAllUserRepositoriesName(user) == (
		dcl userRepos: set of String := {};
		for all r in set repositories do
			if r.getOwner() = user
				then userRepos := userRepos union {r.getName()};
		return userRepos;
	)
	pre {user} inter users = {user}; -- utilizador esta no sistema;
	
	public pure getUserSpecificRepository: User * String ==> Repository
	getUserSpecificRepository(user, repName) == (
		dcl rep: Repository;
		for all r in set repositories do
			if r.getOwner() = user and r.getName() = repName
				then rep := r;
		return rep;
	)
	pre {user} inter users = {user} -- utilizador esta no sistema;
		and {repName} inter getAllUserRepositoriesName(user) = {repName}; -- repositorio esta no sistema;
	
	-- Create a new user
	public addUser: User ==> ()
	addUser(user) == (
		users := users union {user}
	)
	pre {user.getUsername()} inter getAllUsernames() = {} -- nome do utilizador nao esta a ser utilizado
		and {user.getEmail()} inter getAllEmails() = {} -- email do utilizador nao esta a ser utilizado
		and {user} inter users = {} -- utilizador nao esta no sistema
	post {user.getUsername()} inter getAllUsernames() = {user.getUsername()}
		and {user.getEmail()} inter getAllEmails() = {user.getEmail()}
		and {user} inter users = {user}; -- utilizador esta no sistema
	
	-- User login
	public login: String * String ==> bool
	login(username, password) == (
		return getUser(username).getPassword() = password;
	)
	pre {username} inter getAllUsernames() <> {} -- o user existe no sistema
		and len username > 0 and len password > 0; -- o input existe
		
	-- Add repository
	public addRepository: User * String ==> ()
	addRepository(user, repName) == (
		dcl newRepo: Repository := new Repository(user, repName);
		repositories := repositories union {newRepo};
	)
	pre {repName} inter getAllUserRepositoriesName(user) = {} -- repositorio nao existe
		and user in set users -- user criador existe no sistema
		and len repName > 0 -- input existe
	post {repName} inter getAllUserRepositoriesName(user) = {repName}; -- repositorio esta no sistema
	
	-- Add collaborator to a owner repository
	public addCollaborator: User * String * User ==> ()
	addCollaborator(owner, repName, newCollab) == (
		dcl repo: Repository := getUserSpecificRepository(owner, repName);
		repo.addCollaborator(owner, newCollab);
	)
	pre {owner, newCollab} inter users = {owner, newCollab} -- quer o owner, quer o novo colaborador estao no sistema
		and {repName} inter getAllUserRepositoriesName(owner) = {repName} -- o repositorio existe
		and getUserSpecificRepository(owner, repName).getCollaborators() inter {newCollab} = {} -- o utilizador a ser introduzido ainda nao e coloborador
	post getUserSpecificRepository(owner, repName).getCollaborators() inter {newCollab} = {newCollab};
	
functions
-- TODO Define functiones here

traces
-- TODO Define Combinatorial Test Traces here

end Github