class Branch

types
-- TODO Define types here
	public String = Utilities`String;

values
-- TODO Define values here

instance variables
-- TODO Define instance variables here
	private name: String;
	private repository: Repository;
	private commits: seq of Commit := [];

operations
-- TODO Define operations here
	public Branch: Repository * String ==> Branch
	Branch(repo, branchName) == (
		name := branchName;
		repository := repo;
		return self;
	);
	
	public pure getRepository: () ==> Repository
	getRepository() == (
		return repository;
	);
	
	public pure getName: () ==> String
	getName() == (
		return name;
	);
	
	public pure getCommits: () ==> seq of Commit
	getCommits() == (
		return commits;
	);
	
	public addCommit: User * Commit ==> ()
	addCommit(user, commit) == (
		commits := commits ^ [commit];
	)
	pre user in set repository.getCollaborators() or user = repository.getOwner()
		and {commit.getIdentifier()} inter repository.getAllCommitsID() = {};

functions
-- TODO Define functiones here

traces
-- TODO Define Combinatorial Test Traces here

end Branch